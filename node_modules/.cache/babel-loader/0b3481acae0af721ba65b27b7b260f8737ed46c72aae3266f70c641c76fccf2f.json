{"ast":null,"code":"// import { jsx } from 'vue/jsx-runtime';\nlet cities = ['Нижний Тагил', 'Москва', 'Владивосток', 'Екатеринбург', 'Сочи', 'Мурманск', 'Верхоянск', 'Санкт-Петербург', 'Лондон', 'Нью-Йорк', 'Париж', 'Каир', 'Сидней'];\nlet weathers = [{\n  code: '01d',\n  src: 'sun'\n}, {\n  code: '01n',\n  src: 'moon'\n}, {\n  code: '02d',\n  src: 'small_clouds_d'\n}, {\n  code: '02n',\n  src: 'small_clouds_n'\n}, {\n  code: '03d',\n  src: 'clouds_d'\n}, {\n  code: '03n',\n  src: 'clouds_n'\n}, {\n  code: '04d',\n  src: 'clouds_d'\n}, {\n  code: '04n',\n  src: 'clouds_n'\n}, {\n  code: '09d',\n  src: 'rain_d'\n}, {\n  code: '09n',\n  src: 'rain_n'\n}, {\n  code: '10d',\n  src: 'rain_d'\n}, {\n  code: '10n',\n  src: 'rain_n'\n}, {\n  code: '11d',\n  src: 'thunder'\n}, {\n  code: '11n',\n  src: 'thunder'\n}, {\n  code: '13d',\n  src: 'snow'\n}, {\n  code: '13n',\n  src: 'snow'\n}, {\n  code: '50d',\n  src: 'haze_d'\n}, {\n  code: '50n',\n  src: 'haze_n'\n}];\nexport default {\n  name: 'App',\n  data() {\n    return {\n      weather_data: null,\n      forecast_data: null,\n      cities: [{\n        name: 'Нижний Тагил'\n      }, {\n        name: 'Москва'\n      }, {\n        name: 'Владивосток'\n      }, {\n        name: 'Екатеринбург'\n      }, {\n        name: 'Сочи'\n      }, {\n        name: 'Мурманск'\n      }, {\n        name: 'Верхоянск'\n      }, {\n        name: 'Санкт-Петербург'\n      }, {\n        name: 'Лондон'\n      }, {\n        name: 'Нью-Йорк'\n      }, {\n        name: 'Париж'\n      }, {\n        name: 'Каир'\n      }, {\n        name: 'Сидней'\n      }],\n      city_result: null,\n      weather_logo: \"sun\"\n    };\n  },\n  mounted() {},\n  components: {},\n  methods: {\n    SelectCity() {\n      let city = cities[document.querySelector('.city_list').selectedIndex];\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=a06d5389c363dc0143a775466aef9cb3&lang=ru&units=metric`).then(resp => resp.json()).then(json => {\n        this.weather_data = json;\n      });\n      fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=a06d5389c363dc0143a775466aef9cb3&lang=ru&units=metric`).then(resp => resp.json()).then(json => {\n        this.forecast_data = json;\n      });\n    },\n    LoadImage() {\n      let weather_code = this.weather_data[\"weather\"][0][\"icon\"];\n      let i = 0;\n      while (i < weathers.length) {\n        if (weather_code == weathers[i].code) {\n          this.weather_logo = weathers[i].src;\n        }\n        i++;\n      }\n    },\n    LoadImageForecast() {\n      let weather_codes = document.querySelectorAll('.weather_code.hidden');\n      let images = document.querySelectorAll('.image_weather.forecast');\n      let i = 0;\n      while (i < weathers.length) {\n        let j = 0;\n        while (j < weather_codes.length) {\n          if (weather_codes[j].textContent == weathers[i].code) {\n            images[j].src = this.getImagePath(weathers[i].src);\n          }\n          j++;\n        }\n        i++;\n      }\n    },\n    getImagePath(imageFileName) {\n      const images = require.context('@/assets/', false, /\\.png$/);\n      return images(`./${imageFileName}.png`);\n    }\n  }\n};","map":{"version":3,"names":["cities","weathers","code","src","name","data","weather_data","forecast_data","city_result","weather_logo","mounted","components","methods","SelectCity","city","document","querySelector","selectedIndex","fetch","then","resp","json","LoadImage","weather_code","i","length","LoadImageForecast","weather_codes","querySelectorAll","images","j","textContent","getImagePath","imageFileName","require","context"],"sources":["C:\\Users\\rmnvs\\Documents\\Институт\\3 курс\\Разработка клиентской части веб-приложений\\API\\my_api\\src\\App.vue"],"sourcesContent":["<template>\n  <h1 class=\"title\">Погода</h1>\n  <div class=\"background\">\n    <p class=\"text\">Выберите город: </p>\n    <select class=\"city_list\" v-model=\"city_result\" @change=\"SelectCity\" @blur=\"LoadImage\">\n      <option v-for=\"city in cities\" :key=\"city.name\" selected=\"selected\" v-bind:value=\"city\" >{{city.name}}</option>\n    </select>\n    <div v-if=\"city_result\"> <!---->\n      <p v-if=\"!weather_data\" class=\"loader\"><br>Загрузка...</p> \n      <div class=\"weather\" v-else> <!---->\n        <div class=\"temp_box weather_box\">\n          <img class=\"image_weather\" :src=\"getImagePath(weather_logo)\">\n          <p class=\"text temp\">{{ Math.round(weather_data.main.temp) }}&deg;C</p> <!---->\n        </div>\n        <div class=\"description_box weather_box\">\n          <p class=\"text block\">{{ weather_data.weather[0].description.replace(weather_data.weather[0].description[0], weather_data.weather[0].description[0].toUpperCase()) }}</p> <!-- -->\n          <p class=\"text block\">Ощущается как {{ Math.round(weather_data.main.feels_like) }}&deg;C</p> <!-- -->\n        </div>\n        <div class=\"others_box weather_box\">\n          <div class=\"other_elem block\">\n            <img class=\"other_icon\" src=\"../src/assets/barometer.png\">\n            <p class=\"text\">{{ weather_data.main.pressure }} гПА</p> <!---->\n          </div>\n          <div class=\"other_elem block\">\n            <img class=\"other_icon\" src=\"../src/assets/humidity.png\">\n            <p class=\"text\">{{ weather_data.main.humidity }}%</p> <!---->\n          </div>\n          <div class=\"other_elem block\">\n            <img class=\"other_icon\" src=\"../src/assets/wind.png\">\n            <p class=\"text\">{{ weather_data.wind.speed }} м/с</p> <!---->\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div v-if=\"city_result\"><!---->\n    <h1 class=\"title\" v-if=\"weather_data\">Прогноз (5 дней)</h1> <!---->\n    <div class=\"background forecast\" v-if=\"forecast_data\" @mouseover=\"LoadImageForecast\">\n      <div  class=\"forecast_elem\" v-for=\"forecast in forecast_data.list\" :key=\"forecast\">\n        <p class=\"hidden weather_code\">{{ forecast.weather[0].icon }}</p>\n        <p class=\"text forecast time\">{{forecast.dt_txt.split(' ')[0].split('-')[2] + '.' + forecast.dt_txt.split(' ')[0].split('-')[1]}}</p>\n        <p class=\"text forecast time_2\">{{forecast.dt_txt.split(' ')[1].split(':')[0] + ':' + forecast.dt_txt.split(' ')[1].split(':')[1]}}</p>\n        <div class=\"forecast_temp_box\">\n          <img class=\"image_weather forecast\" :src=\"getImagePath(weather_logo)\">\n          <p class=\"text forecast_temp\">{{Math.round(forecast.main.temp)}}&deg;C &nbsp;/&nbsp;{{Math.round(forecast.main.feels_like)}}&deg;C</p>\n        </div>\n        <div class=\"forecast_others_box\">\n          <div class=\"other_elem block\">\n            <img class=\"other_icon forecast\" src=\"../src/assets/barometer.png\">\n            <p class=\"text forecast\">{{ forecast.main.pressure }} гПа</p>\n          </div>\n          <div class=\"other_elem block\">\n            <img class=\"other_icon forecast\" src=\"../src/assets/humidity.png\">\n            <p class=\"text forecast\">{{forecast.main.humidity}}%</p>\n          </div>\n          <div class=\"other_elem block\">\n            <img class=\"other_icon forecast\" src=\"../src/assets/wind.png\">\n            <p class=\"text forecast\">{{forecast.wind.speed}} м/с</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script >\n// import { jsx } from 'vue/jsx-runtime';\nlet cities = [\n    'Нижний Тагил',\n    'Москва',\n    'Владивосток',\n    'Екатеринбург',\n    'Сочи',\n    'Мурманск',\n    'Верхоянск',\n    'Санкт-Петербург',\n    'Лондон',\n    'Нью-Йорк',\n    'Париж',\n    'Каир',\n    'Сидней'\n]\nlet weathers = [\n  {code: '01d', src:'sun'},\n  {code: '01n', src:'moon'},\n  {code: '02d', src:'small_clouds_d'},\n  {code: '02n', src:'small_clouds_n'},\n  {code: '03d', src:'clouds_d'},\n  {code: '03n', src:'clouds_n'},\n  {code: '04d', src:'clouds_d'},\n  {code: '04n', src:'clouds_n'},\n  {code: '09d', src:'rain_d'},\n  {code: '09n', src:'rain_n'},\n  {code: '10d', src:'rain_d'},\n  {code: '10n', src:'rain_n'},\n  {code: '11d', src:'thunder'},\n  {code: '11n', src:'thunder'},\n  {code: '13d', src:'snow'},\n  {code: '13n', src:'snow'},\n  {code: '50d', src:'haze_d'},\n  {code: '50n', src:'haze_n'}\n]\n\n\n\nexport default {\n  name: 'App',\n  data(){\n    return{\n      weather_data:null,\n      forecast_data:null,\n      cities:[\n        {name:'Нижний Тагил'},\n        {name:'Москва'},\n        {name:'Владивосток'},\n        {name:'Екатеринбург'},\n        {name:'Сочи'},\n        {name:'Мурманск'},\n        {name:'Верхоянск'},\n        {name:'Санкт-Петербург'},\n        {name:'Лондон'},\n        {name:'Нью-Йорк'},\n        {name:'Париж'},\n        {name:'Каир'},\n        {name:'Сидней'},\n      ],\n      city_result:null,\n      weather_logo: \"sun\"\n\n    }\n  },\n  mounted(){\n  },\n  components: {\n    \n  },\n  methods: {\n    SelectCity(){\n      let city = cities[document.querySelector('.city_list').selectedIndex];\n      \n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=a06d5389c363dc0143a775466aef9cb3&lang=ru&units=metric`)\n          .then(resp=>resp.json())\n          .then(json=>{\n            this.weather_data=json;\n          });\n      \n      fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=a06d5389c363dc0143a775466aef9cb3&lang=ru&units=metric`)\n          .then(resp=>resp.json())\n          .then(json=>{\n            this.forecast_data=json;\n          });\n    },\n    LoadImage(){\n      let weather_code = this.weather_data[\"weather\"][0][\"icon\"];\n\n      let i = 0;\n      while (i< weathers.length){\n        if (weather_code == weathers[i].code){\n          this.weather_logo = weathers[i].src\n        }\n        i++;\n      }\n    },\n    LoadImageForecast(){\n      let weather_codes = document.querySelectorAll('.weather_code.hidden');\n      let images = document.querySelectorAll('.image_weather.forecast');\n\n      let i = 0;\n      while (i< weathers.length){\n        let j = 0;\n        while (j < weather_codes.length){\n          if (weather_codes[j].textContent == weathers[i].code){\n            images[j].src = this.getImagePath(weathers[i].src);\n          }\n\n          j++;\n        }\n        i++;\n      }\n    },\n    getImagePath(imageFileName) {\n      const images = require.context('@/assets/', false, /\\.png$/);\n      return images(`./${imageFileName}.png`);\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: left;\n  color: #d8d8d8;\n}\n.hidden{\n  display: none;\n}\n.city_list{\n  font-size: 30px;\n  margin-left: 30px;\n  background: #0b1529;\n  border: solid 2px #d8d8d8;\n  border-radius: 10px;\n  color: #d8d8d8;\n  display: inline;\n  margin-right: 30px;\n}\n.date_list{\n  font-size: 35px;\n  margin: 30px;\n  background: #0b1529;\n  border: solid 2px #d8d8d8;\n  border-radius: 10px;\n  color: #d8d8d8;\n  display: inline;\n}\n.weather{\n  margin-right: 30px;\n}\n.background{\n  background: linear-gradient(270deg, #3a50ab, #0b1529);\n  border-radius: 10px;\n  margin:40px 20px 20px 20px;\n  padding-top: 10px;\n  box-shadow: black 0px 0px 10px 0px;\n  padding-bottom: 20px;\n}\n.background.forecast{\n  padding-top: 30px;\n  padding-right: 20px;\n}\n.forecast_elem{\n  border-radius: 10px;\n  box-shadow: black 0px 0px 10px 0px;\n  display: inline-block;\n  margin: 0px 0px 30px 20px;\n  padding: 15px;\n}\n.title{\n  font-size: 50px;\n  margin-left: 30px;\n  color: #0b1529;\n  margin-right: 30px;\n}\n.text{\n  font-size: 35px;\n  display: inline-block;\n  margin-left: 30px;\n  vertical-align: middle;\n}\n.text.forecast{\n  font-size: 25px;\n}\n.text.forecast.time{\n  font-size: 35px;\n  font-weight: bold;\n  border: solid 2px #d8d8d8;\n  border-radius: 10px;\n  padding: 5px 10px 5px 10px;\n}\n.text.forecast.time_2{\n  font-size: 35px;\n}\n.text.forecast_temp{\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  font-size: 40px;\n}\n.block{\n  display: block !important;\n}\n.temp{\n  font-size: 80px !important;\n  vertical-align: middle;\n}\n.image_weather{\n  width: 100px;\n  display: inline-block;\n  vertical-align: middle;\n}\n.image_weather.forecast{\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n  width: 100px;\n\n}\n.forecast_others_box{\n  margin-left: 30px;\n}\n.weather_box{\n  margin: 30px;\n  display: inline-block;\n  vertical-align: middle;\n}\n.other_icon{\n  width: 45px;\n  vertical-align: middle;\n}\n.other_icon.forecast{\n  width: 35px;\n}\n.loader{\n  font-size: 35px;\n  margin: 0px 0px 30px 30px;\n  display: inline-block;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}